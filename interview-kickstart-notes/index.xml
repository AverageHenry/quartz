<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interview Kickstart Notes on</title><link>https://AverageHenry.github.io/quartz/interview-kickstart-notes/</link><description>Recent content in Interview Kickstart Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://AverageHenry.github.io/quartz/interview-kickstart-notes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Brute-Force/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Brute-Force/</guid><description>Brute Force</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Decrease-Conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Decrease-Conquer/</guid><description>Decrease &amp;amp; Conquer Strategy General Overview of Strategy: Solve the problem by solving a small portion of the problem (subproblem), element by element, until the entire problem is solved.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Divide-Conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Divide-Conquer/</guid><description>Divide &amp;amp; Conquer General overview of the strategy Divide the problem into multiple smaller instances (most often 2), generally of the same size.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Transform-Conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Design-Strategies/Transform-Conquer/</guid><description>Transform &amp;amp; Conquer General Overview: Involves rearranging the input in one of two ways:
Input rearrangement ([[content/Interview Kickstart Notes/Sorting Foundations/Presorting]], for example) Data representation (Representing data in a different manner, a min heap, for example) See examples of [[content/Interview Kickstart Notes/Sorting Foundations/Sorting Algorithms/Heapsort]].</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/General-Prep-Strategy-Schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/General-Prep-Strategy-Schedule/</guid><description>General Prep Strategy &amp;amp; Schedule Study Order: Foundations (pre-lecture videos) Lectures Practice &amp;amp; Supplemental Lectures Each unit should take 7 days or less to complete.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Combinations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Combinations/</guid><description>Combinations - C(n, k) Number of ways to choose k objects out of n, where repetition is not allowed and order is also not important?</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Combinatorial-Enumeration-Binary-Strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Combinatorial-Enumeration-Binary-Strings/</guid><description>Combinatorial Enumeration Binary Strings Given a set of n distinct objects, enumerate all possible &amp;lsquo;combinatorial objects&amp;rsquo;: Can be Permutations or Combinations If ordering matters, we will use permutations.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Printing-All-Permutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Printing-All-Permutations/</guid><description>Printing All Permutations Printing Permutations With Repetitions Allowed Example: Print all decimal strings of length n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def decimal_strings_of_length_n(n): def dshelper(slate): # Base Case: if len(slate) == n: print(slate) else: # Recursive case # Test for digits 0-9 for i in range(10): slate.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Printing-Subsets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Printing-Subsets/</guid><description>Printing Subsets From permutations to combinations: Example: Given a set of n distinct numbers, print(enumerate) all of its subsets. You can use an inclusion/exclusion choice pattern for subsets/combinations.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Recursion-as-a-Lazy-Managers-Strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Recursion-as-a-Lazy-Managers-Strategy/</guid><description>Recursion as a Lazy Manager&amp;rsquo;s Strategy Recursion Solving large problems by reducing them to smaller problems of the same form.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Recursive-Mathematical-Functions-Factorials-for-Permutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Foundations/Recursive-Mathematical-Functions-Factorials-for-Permutations/</guid><description>Recursive Mathematical Functions - Factorials for Permutations Basic Combinatorics The Factorial Function How many ways can you arrange n different objects in a straight line?</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Lecture-Notes/Recursion-Notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Recursion-Lecture-Notes/Recursion-Notes/</guid><description>Recursion Lecture Notes Agenda Recursion is a bit of a misnomer for this lecture.
Recursion has been seen in sorting: Insertion Sort, Merge Sort, and QuickSort.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/_Sorting-Overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/_Sorting-Overview/</guid><description>Sorting Overview Sorting Foundational Videos Sorting Lecture Lecture Slides
Goals Should be able to: Solve problems using sorting algorithms, or extensions of sorting algorithms.</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Presorting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Presorting/</guid><description>![[content/Interview Kickstart Notes/Sorting Foundations/Pasted image 20211115150934.png]]
![[content/Interview Kickstart Notes/Sorting Foundations/Pasted image 20211115152118.png]]</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Counting-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Counting-Sort/</guid><description>Counting Sort Use Case: Used to sort an array with many entries of &amp;lsquo;small&amp;rsquo; values.
Algorithm Overview: Create a data structure to count the occurrence of each number (or object).</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Heapsort/</guid><description>Heapsort Extensions of Heapsort</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Insertion-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Insertion-Sort/</guid><description/></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Merge-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Merge-Sort/</guid><description>Merge Sort Extensions of Merge Sort</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/QuickSort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/QuickSort/</guid><description>Quick Sort Extensions of Quick Sort</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Radix-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Radix-Sort/</guid><description>Radix Sort Algorithm Overview:</description></item><item><title/><link>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Selection-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://AverageHenry.github.io/quartz/Interview-Kickstart-Notes/Sorting-Foundations/Sorting-Algorithms/Selection-Sort/</guid><description>![[content/Interview Kickstart Notes/Sorting Foundations/selection_sort.png]]</description></item></channel></rss>